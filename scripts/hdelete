#! /usr/bin/python3

import argparse
import fnmatch
import os
import sys

DEFAULT_PATTERNS = [".DS_Store", "Thumbs.db", "._*"]
DESCRIPTION = "A simple tool to find and delete hidden OS files like thumbs.db, ds_store, and ._*."
HELP_DIRECTORY = "The directory to run hdelete if you do not want to run in the current directory."
MSG_ACTION_CANCELLED = "Action cancelled by user."
MSG_DANGEROUS_DIRECTORY = "Refusing to run in the root directory. Please specify a safer directory."
MSG_DELETED = "Deleted:"
MSG_ERROR_DELETING = "Error deleting"
MSG_FILES_DELETED = "Files deleted."
MSG_FOUND_FILES = "Found files:"
MSG_NO_MATCHING_FILES = "There are no files matching defined patterns in"
MSG_WARNING_THRESHOLD = "Are you sure you want to delete this many files? Please double-check to ensure that no important files are included."
PROMPT_CONFIRM_DELETE = "Do you want to delete these files? [Y/n]: "
WARNING_THRESHOLD = 25


def parse_args() -> argparse.Namespace:
    """Parses arguments from the command line."""
    parser = argparse.ArgumentParser(description=DESCRIPTION)
    parser.add_argument('-d', '--directory', default=os.getcwd(), type=str, help=HELP_DIRECTORY)
    return parser.parse_args()


def is_root_directory(path: str) -> bool:
    """Ensures hdelete is not running in the root directory."""
    absolute_path = os.path.abspath(path)
    if os.name == "nt":
        drive, tail = os.path.splitdrive(absolute_path)
        return tail in ("\\", "/")
    else:
        return absolute_path == "/"


def find_files(directory: str) -> list:
    """Finds files in the specified directory that match the defined patterns."""
    matching_files = []
    for root, _, files in os.walk(directory):
        for filename in files:
            if any(fnmatch.fnmatch(filename, pattern) for pattern in DEFAULT_PATTERNS):
                matching_files.append(os.path.join(root, filename))
    if not matching_files:
        sys.exit(f"{MSG_NO_MATCHING_FILES} '{directory}'")
    return matching_files


def prompt_user_delete(files: list) -> list:
    """Prompts the user to confirm the deletion of the files found."""
    print(MSG_FOUND_FILES)
    for i, file in enumerate(files):
        print(f"{i + 1}: {file}")
    if len(files) > WARNING_THRESHOLD:
        print(f"\nWarning: More than {WARNING_THRESHOLD} files found!")
        print(f"{MSG_WARNING_THRESHOLD}")
    confirm_delete = input(f"\n{PROMPT_CONFIRM_DELETE}")
    if confirm_delete.strip().lower() not in ("y", "yes"):
        sys.exit(MSG_ACTION_CANCELLED)
    return files


def delete_files(files: list) -> None:
    """Deletes the specified files."""
    for file in files:
        try:
            os.remove(file)
            print(f"{MSG_DELETED} '{file}'")
        except Exception as e:
            print(f"{MSG_ERROR_DELETING} '{file}': {e}")
    print(MSG_FILES_DELETED)


def main() -> None:
    args = parse_args()

    if is_root_directory(args.directory):
        sys.exit(MSG_DANGEROUS_DIRECTORY)

    files = find_files(args.directory)
    files_to_delete = prompt_user_delete(files)
    delete_files(files_to_delete)


if __name__ == '__main__':
    main()
