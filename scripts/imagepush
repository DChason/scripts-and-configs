#!/usr/bin/env python3

import base64
import boto3
import docker


def value_manipulation(values):
    # attempt to decode auth_token to a password value docker login will accept:
    password = base64.b64decode(values.get("auth_token")).decode().split(":")[1]

    # remove the https:// in the registry so docker login doesn't complain about schemes:
    remote_repository = values.get("registry") + "/" + values.get("image_name")[8:]

    # add image_name and image_tag in an accepted format for docker:
    local_image = values.get("image_name") + ":" + values.get("image_tag")

    manipulated = {
        "password": password,
        "local_image": local_image,
        "remote_repository": remote_repository
    }

    # check to make sure there are no empty values:
    for value in manipulated.values():
        if not value:
            raise ValueError("a value was not manipulated properly.")

    return manipulated


def main(input_values):

    values = {
        "profile": input_values.get("profile"),
        "account_number": input_values.get("account_number"),
        "image_name": input_values.get("image_name"),
        "image_tag": input_values.get("image_tag")
    }

    # start docker and aws ecr clients:
    try:
        docker_client = docker.from_env()
        aws_session = boto3.Session(profile_name=values.get("profile")).client("ecr")
        aws_client = aws_session.get_authorization_token(registryIds=[values.get("account_number")])
    except Exception:
        raise ValueError("could not start clients.")

    values.update(
        registry=aws_client["authorizationData"][0]["proxyEndpoint"],
        auth_token=aws_client["authorizationData"][0]["authorizationToken"]
    )

    manipulated_data = value_manipulation(values)

    values.update(
        password=manipulated_data.get("password"),
        local_image=manipulated_data.get("local_image"),
        remote_repository=manipulated_data.get("remote_repository"),
        username="AWS"
    )

    # attempt to log in to docker client with aws ecr registry:
    try:
        docker_login = docker_client.login(
            username=values.get("username"),
            password=values.get("password"),
            registry=values.get("registry")
        )
    except Exception:
        raise ValueError("could not login to docker.")
    print(docker_login)

    # attempt to tag image into a repository:
    try:
        docker_tag = docker_client.api.tag(
            image=values.get("local_image"),
            repository=values.get("remote_repository"),
            tag=values.get("image_tag")
        )
    except Exception:
        raise ValueError("could not tag image repository.")
    print(f"image_tag success: {docker_tag}")

    # TODO: update this section - docker_push returns updating progress bars that i want to capture.
    # attempt to push docker image to aws ecr registry:
    try:
        docker_push = docker_client.api.push(
            repository=values.get("remote_repository"),
            tag=values.get("image_tag")
        )
    except Exception:
        raise ValueError("could not push image to ecr.")
    print(docker_push)


if __name__ == "__main__":

    # get the basic data inputs required:
    profile = input("which aws profile? ")
    account_number = input("which aws account number? ")
    image_name = input("what is the image name? ")
    image_tag = input("what is the image tag? ")

    # check to make sure there are no empty values:
    input_values = {
        "profile": profile,
        "account_number": account_number,
        "image_name": image_name,
        "image_tag": image_tag
    }

    for value in input_values.values():
        if not value:
            raise ValueError("all values are required. please hang up and try your call again.")

    main(input_values)
